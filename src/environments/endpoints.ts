export const apiMethods = {
  users: 'users/',
  usersV2: 'users/v2',
  userTopUser: 'top-user/contractors',
  login: 'users/login',
  loginV2: 'users/login/v2',
  refreshToken: 'users/refreshAccessToken',
  refreshTokenv2: 'v2/users/refreshAccessToken',
  getByToken: 'users/getByToken',
  getInfo: 'users/getInfo',
  deleteUser: 'users/clientContractor',
  acceptedTerms: 'users/acceptPoliciesTermsAndConditions',
  getAcceptedTerms: 'users/policiesTermsAndConditionsAccepted',
  // roles: "roles",
  getRolesList: 'roles/auth/permissions',
  getClientOnboardingStatus: 'users/comClientStatus',
  setClientOnboardingStatus: 'users/comClientOnboarding',
  documentTypes: 'documentTypes',
  countryWithRegion: 'country/countryRegionId/exists',
  country: 'country',
  usStates: 'us/states',
  allCountries: 'country/all',
  entityType: 'entityType',
  entityTypesPerCountry: 'entityType/countryid',
  timezone: 'timezone',
  entity: 'entity',
  person: 'person',
  personImage: 'person/saveProfilePicture',
  personGetImageId: 'person/getProfilePicture',
  client: 'client',
  uploadBulksContracts: 'bulkContract/uploadCsvFile',
  findByOwnerId: 'entity/findByOwnerId',
  findPersonByOwnerId: 'person/findByOwnerId',
  shareholder: 'shareholder',
  findShareholders: 'com_shareholder/entity',
  addShareholders: 'com_shareholder',
  currency: 'currency',
  getContractorHasOldYouSign: 'contractor/getContractorHasOldYouSign',
  setLegalEntityUserAcceptance: 'contractor/setLegalEntityUserAcceptance',
  // saveEntityContractor: 'contractor/saveEntityContractor',
  contractor: 'contractor',
  contractorUpdate: 'contractor/updateContractor',
  getContractorByOwnerId: 'contractor/getDto',
  legalStatus: 'legalStatus',
  // saveIndividualContractor: 'contractor/saveIndividualContractor',
  contractType: 'contractType',
  contract: 'contract',
  bulkContracts: 'contract/bulkContratsDetail/',
  periodicPayment: 'periodicPayment',
  paygType: 'paygType',
  teamFindByClient: 'team/findByClient',
  contractSaveComplianceOwnContractPdf: 'contract/saveComplianceOwnContractPdf',
  contractPaymentConfig: 'contractPaymentConfig',
  saveMilestone: 'contractPaymentConfig/saveMilestone',
  contractPaymentConfigByContractId: 'contractPaymentConfig/contract',
  paymentDetailConfigcontractPaymentConfigId:
    'paymentDetailConfig/contractPaymentConfigId',
  paymentSchedulecontractPaymentConfigId:
    'paymentSchedule/contractPaymentConfigId',
  contractGeneratePdf: 'contract/generatePdf',
  contractGeneratePdfByteArray: 'contract/generatePdfByteArray',
  contractGenerateClientPlugPlayPdfByteArray:
    'contract/generateClientPlugPlayPdfByteArray',
  contractGenerateAdminPlugPlayPdfByteArray:
    'contract/generateAdminPlugPlayPdfByteArray',
  contractUpdateContractorId: 'contract/updateContractorId',
  contractTotalReportList: 'contract/totalsReportList',
  contractReportList: 'contract/reportListFiler',
  contractReportList2: 'contract/reportList',
  contractClientSign: 'contract/clientSign',
  contractClientSignBytes: 'contract/clientSignBytes',
  bulkSignClientBytes: 'contract/bulkSignClientBytes',
  contractContractorSign: 'contract/contractorSign',
  contractContractorSignBytes: 'contract/contractorSignBytes',
  contractContractorInvitation: 'contract/inviteContractor',
  contractorsByTeamId: 'contractor/team/',
  contractorsWithoutTeam: 'contractor/getAllWithoutTeam',
  contractGenerateTaxPdf: 'contract/generateTaxPdf',
  contractClauseContract: 'contractClause/contract/',
  nonCompetitionAndSolicitationClause:
    'contract/nonSolicitationAndNonCompetition',
  documents: 'documentCountryPerson',
  documentsContractors: 'documentCountryPerson/all',
  documentsCategories: 'documentCountry/categories',
  documentsSaveFile: 'documentCountryPerson/saveFile/',
  documentsRemoveFile: 'documentCountryPerson/removeFile/',
  fileDownload: 'file/download/',
  fileViewDownload: 'file/viewDownload/',
  invoiceSummaryDownload: 'file/viewDownloadSummary/',
  resetPassword: 'passwordReset/reset/',
  changePassword: 'passwordReset/changePassword',
  setPassword: 'users/changePassword ',
  firstLogin: 'users/firstlogin/',
  notificationFindByUserId: 'notification/findByUserId',
  notificationsSettingsByUser: 'notificationSettings',
  notificationReadAllForUserId: 'notification/readAll',
  notificationReviewById: 'notification/review/',
  contractorsDocuments: 'contractor/team/documents',
  documentsContractor: 'documentCountryPerson/findDtoByPersonId/',
  clientPayoutUpcoming: 'client/payout/upcoming',
  clientPayoutSent: 'client/payout/sent',
  contractorPayoutUpcoming: 'contractor/payout/upcoming',
  contractorPayoutReceived: 'contractor/payout/received',
  mkWorkAreas: 'mkWorkArea',
  findRoleQuery: 'contract/findRolQuery',
  createAmendment: 'amd',
  amendmentConfiguration: 'amd/configuration',
  amendmentsOfContract: 'amd/contract/',
  amendmentPreviewPdf: 'amd/previewOfAmendPdf/',
  amendmentClientSign: 'amd/clientSign',
  amendmentContractorSign: 'amd/contractorSign',
  amendmentUploadOwnTemplate: 'amd/own-template',
  plugAndPlayContractReportList: 'contract/plugAndPlayreportList',
  contractEndDate: 'contract/close',
  industryTypes: 'insdustryType',
  com_check_kyb: 'com_check_kyb',
  changeNotificationStatus: 'changeNotificationStatus',
  paymentMethods: 'paymentMethod',
  daysToApplyPaymentMethodConfig:
    'paymentMethodContractor/alertBeforeChangePaymentMethods',
  traditionalContractorContractPayments:
    'paymentMethodContractor/traditionalContractorContractPayments',
  splitPayment: 'paymentMethodContractor/splitPayment',
  primaryMethod: 'paymentMethodContractor/changePrimaryPaymentMethod',
  validateDeleteMethod: 'paymentMethodContractor/validateDeletePaymentMethod',
  deleteMethod: 'paymentMethodContractor/deletetPayment',
  paymentTransferType: 'paymentTransferType',
  identityType: 'identityType/findByCountry',
  banksPerCountry: 'bank/findByCountryId',
  paymentBankAccountType: 'paymentBankAccountType/country/',
  saveFile: 'file/saveFile',
  saveDocumentSidePicture: 'person/saveDocumentSidePicture',
  updateFile: 'file/updateOnlyFile',
  fileImg: 'file',
  paymentMethodContractor: 'paymentMethodContractor',
  paymentMethodContractorV2: 'paymentMethodContractor/v2',
  paymentMethodCrytoContractor: 'paymentMethodContractor/cryptocurrencyMethod',
  sendMoneyTransfer: 'top-cashout/cashouts',
  rapydCountries: 'top-cashout/cashouts/countries',
  rapydBanksByCountry: 'top-cashout/cashouts/banks',
  rapydFieldsByBank:
    'top-bff-payment-methods/payment-methods/provider/rapyd/banks/fields',
  getExhibitA: 'exhibitA/download/',
  kycById: 'checks/',
  kycHistory: 'checks/history/',
  matiVerificationStatus: 'mati/status/',
  matiVerifyStatus: 'compliance/mati/verification/status',
  matiMetadata: 'compliance/mati/dashboard/proces-flow',
  findMatiVerification: 'mati/findMatiVerification/',
  hideVerifiedAlert: 'mati/updateStatusAlert',
  changeVerifyStatus: 'mati/updateVerificationStatus',
  saveContractorInformacionVC: 'vcContractor',
  saveContractorDocumentVC: 'vcContractor/file',
  getContractorInformacionVC: 'vcContractor/',
  getContractorDocumentVC: 'vcContractor/files/',
  endContractReasons: 'contractEndReasons',
  endContractReasonsByContractId:
    'contractContractEndReason/saveEndReasonIdList',
  contractorCertificationPlugPlay: 'contractorCertification/preview/',
  inviteMemberToTeam: 'teamInvitation',
  findTeamMemberInvitations: 'teamInvitation/findByUserId',
  account_settings: 'compliance/com_user',
  account_settings_notification: 'compliance/com_user/sections/status',
  account_settings_notification_section:
    'compliance/com_user/notification/status',
  findTeamMembers: 'teamInvitation/findMembersByUserId',
  findManagers: 'teamInvitation/findManagersTeamByUserId',
  tokenEmail: 'teamInvitation/token/',
  documentsSocialSecurityFile: 'documentCountryPerson/socialSecurity',
  taxIdentification: 'taxIdentification/iso/',
  timezoneNoSecure: 'teamInvitation/token/findAllTimezones',
  countryNoSecure: 'teamInvitation/token/findAllCountries',
  userAdminSave: 'teamInvitation/token/signup',
  signeeInvitation: 'v2/signInvitation',
  signeeInvitationToken: 'v2/signInvitation/token/',
  signeeInvitationTokenPdf: 'v2/signInvitation/token/generatePdfByteArray/',
  signeeInvitationTokenSign: 'v2/signInvitation/token/Sign',
  SigneeInvitationContractExhibit:
    'v2/signInvitation/token/SignContractExhibit',
  signeeInvitationTokenExhibitAPdf:
    'v2/signInvitation/token/generateOwnPdfByteArray/',
  signInvitation: 'signInvitation',
  signInvitationsearch: 'v2/signInvitation/searchByDocumentId/',
  signInvitationDelete: 'v2/signInvitation/delete/',
  signInvitationToken: 'signInvitation/token/',
  paymentStatus: 'accInvoice/invoice/paymentStatus/',
  signInvitationTokenSign: 'signInvitation/token/Sign',
  signInvitationTokenPdf: 'signInvitation/token/generatePdfByteArray/',
  signInvitationTokenExhibitAPdf:
    'signInvitation/token/generateOwnPdfByteArray/',
  SignInvitationContractExhibit: 'signInvitation/token/SignContractExhibit',
  contractCommission: 'contract/updateContractCommission',
  commissionTemplate: 'upcomingPayments/bulkCommissionTemplate',
  savecommissionTemplate: 'upcomingPayments/uploadCsvFile',
  saveBulkCommission: 'upcomingPayments/saveBulkCommission',
  contractorSummary: 'contractor/getContractorSummaryDetails/',
  getThumbnailEncode: 'file/getThumbnailEncode/',
  getCrypticurrencies: 'cryptocurrency',
  getAccountPatterns:
    'paymentMethodContractorBankAccount/findAccountNumberValidationByCountryId/',
  generateOtpToken: 'otp/token',
  generateOtp2FAuth: 'otp/token/sesion',
  validateOtp2FAuth: 'otp/token/sesion/consume/',
  validateOtpToken: 'otp/token/consume/',
  generateOtpTokenOpen: 'otp/token/open/',
  generateOtpTokenSesion: 'otp/token/sesion',
  sendOtpTokenSesion: 'otp/token/sesion/consume',
  validateOtpTokenOpen: 'otp/token/open/consume/',
  profileContractor: 'profile/contractor',
  validateFirstSign: 'contract/verifyIsFirstSign/',
  getContractorType: 'contractorType/getContractorType/',
  updateUsPerson: 'person/updateUsPerson/',
  federalTax: 'entityType/countryid/',
  updateContractorUS: 'contractor/updateContractorUS/',
  contractorSignTax: 'contractor/contractorSignTax',
  saveIndividual: 'contractor/saveIndividualContractor/v2',
  saveBusiness: 'contractor/saveEntityContractor/v2',
  getContractorInfo: 'contractor/getContractorInfoDto',
  saveCompanyManagers: 'comManagerController/saveManager',
  getClientInfo: 'client/getClientInfoDto',
  shareholderPercentage: 'client/shareholderPercentage',
  activeAccountEndValidation: 'client/endValidation',
  getClientPersonalInfoDto: 'client/getClientPersonalInfoDto',
  getManagerInfoDto: 'comManagerController/getManagerInfoDto',
  comManagerPositionTypeController: 'comManagerPositionTypeController',
  shoppingCartInfo: 'invoice/accInvoice/cart/items',
  weHireContractPdf: 'contract/ontopHireTemplateContract',
  transactionTypes: 'parameters/wTransactionTypes',
  sendReminderContractSignature: 'notifier/sendReminderContractSignature',
  getNetworksByCurrency: 'paymentMethodContractor/cryptocurrencyMethod',
  saveClient: 'client/saveClient/v2',
  getListContract: 'contract/totalPendingSignature',
  verifyClientToken: 'v2/otu/clients/',
  signupForClients: 'users/client',
  countryCurrencies: 'country/currency',
  attemptedFillOurKybForm: 'v2/kyb-com-check',
  clientInformation: 'client/findByCreatorId',
  getEntityContractorInfo: 'contractor/getEntityContractorInfoDto',
  saveEntityContractor: 'contractor/saveEntityContractor/v3',
  uploadXLSXContractsFile: 'contract/contractBulk/uploadXLSXContractsFile',
  viewXLSXContractsFile: 'contract/contractBulk/viewXLSXContractsFile',
  deleteXLSXContractsFile: 'contract/contractBulk/deleteXLSXContractsFile',
  createAllContracts: 'contract/contractBulk/createAllContracts',
  signAllContracts: 'contract/contractBulk/signAllContracts',
  findAllContractorsByClient: 'client/findAllContractors',
  findAllByContractor: 'contract/findAllByContractor',
};

export const timeMethods = {
  contracts: 'contracts/',
  contractsTimeBase: 'contracts/timeBase',
  contractorNewExp: 'contractor/newExp',
  contractor: 'contractor',
  contractorV2: 'contractor/V2',
  contractorV2ExcludePaid: 'contractor/V2/excludePaid',
  contractorTimeOff: 'contractor/timeoff',
  clientPending: 'client/pending',
  clientSolved: 'client/solved',
  clientTimeSheet: 'client/timesheet',
  timeSheetFile: 'timeSheetFile',
  timeSheetFileByContractorName:
    'timeSheetFile/downloadTimeSheetFile/ByContractorNameLastNameYearMonth',
  clientContractorList: 'client/contractors',
  approveTimeSheets: 'client/approve',
  rejectTimeSheets: 'client/reject',
  payConfig: 'contractor/payConfig',
  offClientPending: 'client/timeoff/pending',
  offClientSolved: 'client/timeoff/solved',
  contractorMilestoneByContractId: 'contractor/milestones/contractId/',

  contractorMilestoneByContractIdFromClient: 'client/milestones/contractId/',
  contractorsTimeBaseResultDriven: 'client/contractorsTimeBaseResultDriven',
  timeBaseResultDrivenContracts: 'client/timeBaseResultDrivenContracts/',
  client: 'client/',
};

export const paymentMethods = {
  customerList: 'stripe_server/account/customer',
  customerListV2: 'stripe_server/source/paymentMethod/customer',
  customerCreditCardList: 'stripe_server/source/creditCard/customer',
  customerDefaultPaymentMethod: 'stripe_server/source/paymentMethod/default',
  createLinkBankAccount: 'stripe_server/account/create',
  createLinkCreditCard: 'stripe_server/source/creditCard/link',
  payment: 'payment',
  customerTransactionHistory: 'paymentTransaction/client',
  customerTransactionHistoryPaginated: 'paymentTransaction/client/transactions',
  transactionsInCustomerProcess: 'paymentTransaction/client/status/pending',
  paymentStatusMessage: 'paymentStatusRequest',
  wireTransfers: 'paymentOntopAccountInfo/findByPaymentMethodId/6',
  enableAutoPayment: 'autopayment',
  deleteAccount: 'stripe_server/paymentMethod/',
  getAllPayments: 'paymentTransaction/client/count',
  wireTransfer: 'stripe_server/source/paymentMethod/wiretransfer',
  cryptoTransfer: 'stripe_server/source/paymentMethod/crypto',
  getAllExtraPaymentByClientUnpaid: 'extraPayment/getAllByClient?type=UNPAID',
  getAllExtraPaymentByClientHistorical:
    'extraPayment/getAllByClient?type=HISTORICAL',
  extraPaymentsRules: 'extraPayment/getLimits',
  completeCreditCardRequest: 'stripe_server/source/paymentMethod',
  hasUserConfiguredTwoPaymentMethods: 'setup-payment-method',
  saveSelectedPaymentMethods: 'setup-payment-method',
  filtersByClient: 'extraPayment/getAllByClient',
  addExtraPayment: 'extraPayment/addExtraPaymentsInvoice',
  deleteExtraPayment: 'accInvoice/{invoiceId}/extraList',
  editExtraPayment: 'accInvoice/extra',
  checkoutLink: 'checkout_server/getPaymentLink',
  getCheckoutPaymentDetails: 'checkout_server/getPaymentLinkDetails',
  cancelCheckoutPayment: 'checkout_server/getPaymentLinkCancel',
  getCheckoutPaymentLinkDetails: 'checkout_server/getPaymentLinkDetails',
};

export const abacoMethods = {
  acceptCryptoCurrency: 'payment/acceptCryptoCurrency',
  getWalletAddress: 'payment/address',
  getWalletNetworks: 'payment/network',
};

export const acceptancesMethods = {
  disclaimerTaxesNeeded: 'users/disclaimerTaxes',
  acceptDisclaimerTaxes: 'users/disclaimerTaxes/accept',
};

export const invoicesMethods = {
  invoices: 'accInvoice/state',
  downloadClientInvoicesZip: 'accInvoice/Download/ClientInvoicesZip',
  downloadContractorInvoicesZip: 'accInvoice/Download/InvoicesZip',
  downloadSingleFile: 'file/viewDownload/{id}',
  downloadInvoicePDFByClient:
    'accInvoice/downloadContractorInvoicePdfByClient/',
  downloadInvoicePDFByContractor:
    'accInvoice/downloadContractorInvoicePdfByContractor/',
  downloadInvoicesExcel: 'accInvoice/download/Excel',
  downloadPurchaseVoucher: (transactionId: number) =>
    `reports/transactions/${transactionId}/generatePdf`,
  invoicesAmount: 'accInvoice/state/totals',
  invoicesNote: 'accInvoice/note/',
  invoicesContractor: 'accInvoice/contractor',
  upcomingPayments: 'upcomingPayments',
  upcomingPaymentsV2TraditionalDownloadSingle:
    'accInvoice/v2/invoice/{accInvoiceId}',
  upcomingPaymentsV2TraditionalDownloadMultiples:
    'accInvoice/v2/DetailSumary/generate',
  payments: 'accInvoice/list',
  upcomingPaymentsV2FiltersSetup: 'upcomingPayments/v2/setup',
  deleteExtraPaymentById: 'upcomingPayments/v2/paymentExtra/{id}',
  addExtraPaymentMass: 'upcomingPayments/v2/addExtraPayment/mass',
  editExtraPaymentMass: 'upcomingPayments/v2/editPayment/mass',
  checkoutSummary: 'upcomingPayments/checkoutSummary',
  teams: 'upcomingPayments/teams',
  addExtraPayment: 'upcomingPayments/addExtraPayment',
  addExtraPaymentDPPT: 'upcomingPayments/worksheep/addExtraPayment',
  editAmmount: 'upcomingPayments/editAmmount',
  approvePaymentSchedule: 'upcomingPayments/approvePaymentSchedule',
  commissionTemplate: 'upcomingPayments/bulkCommissionTemplate',
  savecommissionTemplate: 'upcomingPayments/uploadCsvFile',
  saveBulkCommission: 'upcomingPayments/saveBulkCommission',
  upcomingTraditional: 'upcomingPayments/traditional',
  upcomingPayg: 'upcomingPayments/paypertask',
  upcomingResult: 'upcomingPayments/milestones',
  upcomingTotals: 'upcomingPayments/totals',
  // to approve uocoming
  approveUpcomingPayg: 'upcomingPayments/worksheep/payg',
  approveUpcomingResult: 'upcomingPayments/worksheep/milestone',
  upcomingReject: 'upcomingPayments/reject',
  deleteExtraPayment: 'upcomingPayments/paymentExtra',
  generatePaymentReceipt: 'accInvoice/paymentReceipt/generate',
  invoicesFilter: `accInvoice/state/{id}/filter`,
  getPaidPerMonth: 'accInvoice/getPaidPerMonth',
  getAllUpconmingPayment: 'upcomingPayments/all',
  getAllInvoices: 'accInvoice/count/3',
  invoicesV2: 'v2/invoices/',
  downloadBulkTemplate: 'bulkpayment/downloadTemplate',
  uploadBulkTemplate: 'bulkpayment/upload',
  downloadBulkextrapaymentTemplate: 'bulkextrapayment/downloadTemplate',
  uploadBulkextrapaymentTemplate: 'bulkextrapayment/upload',
  bulkpayment: 'bulkpayment',
  rejectResult: 'upcomingPayments/reject',
  newPaymentFilters: 'accInvoice/filters',
  generatePaymentReceiptV2: 'accInvoice/v2/PaymentDetailSumary/generate',
};

export const reportMethods = {
  taxes: 'taxes/generateTaxPdf/team/',
  contractor: '/contractor/',
  download: '/download',
  walletCardStatement:
    'walletCardStatement/generatePdf/month/{{MM}}/year/{{YYYY}}',
  walletTransactions: 'wallets/transactions',
};

export const verificationCenterMethods = {
  vcClientCompanyInfo: 'vcClient',
  vcDirectorInfo: 'vcClient/director',
  vcClientFile: 'vcClient/file',
};

export const teamsMethods = {
  team: 'team',
  findByUser: 'team/findByUser',
  addContractorList: 'teamPerson/addContractorList',
  addContractor: 'teamPerson/addContractor',
  removeContractor: 'teamPerson/disableContractor',
  getTeamMembers: 'team/teamMembers',
  getAllTeamsWithoutManager: 'team/getAllWithoutManager',
};

export const payoutMethods = {
  walletBalance: 'wallets/balance',
  walletTransactions: 'top-wallet/wallets/transactions',
  walletTransactionsV2: 'top-bff-wallet/v2/wallets/transactions',
  walletTransactionsV2DetailsPrefix: 'top-bff-wallet/contractors',
  walletTransactionsV2DetailsSuffix: 'wallets/transactions/',
  cardInfo: 'top-card/cards',
  contractCard: 'acceptances/policies-terms-conditions',
  cardRequest: 'top-bff-card/cards',
  cardContractor: 'top-card/cards/transactions',
  hasCard: 'top-card/cards/existence',
  providerFlow: 'top-cashout/cashouts/providers',
  getPaymentsMethodsList: 'top-payment-method/v2/contractors',
  customFields: 'top-front-parameters/cashout-parameters',
  createPaymentV2: 'top-payment-method/v2/contractors',
  cashOutPaymentMethodV2: 'top-cashout/v2/cashouts',
  dynamicCashOutSummary: 'top-cashout/v2/cashouts/summary',
  cancelCard: 'top-card/cards',
  cashoutETA: 'cashouts/eta',
  feesAndFx: 'cashouts/fee',
};

export const cardMethods = {
  transactionHistory: 'top-card/cards/transactions',
  walletPaymentMethods: 'top-payment-method/contractors/',
};

export const cryptoMethods = {
  fee: 'cashouts/fee',
  cashout: 'cashouts',
  cryptoCurrencies: 'v1/payment-methods/cryptos/currencies',
  cryptoNetworks: 'crypto-networks',
};

export const walletMethods = {
  ...cryptoMethods,
  bankFormFields:
    'top-bff-payment-methods/payment-methods/provider/manual/banks/fields',
  bankTransactionDetails: 'top-bff-payment-methods/contractors/',
  jpmorganFields:
    'top-bff-payment-methods/payment-methods/provider/jpmorgan/banks/fields',
  transferTypes: 'payment-methods/transfer-types',
  warnAlerts: 'alerts/active',
};

export const homeMethods = {
  paidForMonth: '',
  pendingSignature: 'contract/totalPendingSignature',
};

export const cashinMethods = {
  addCreditCardURL: 'v1/paymentTransaction/checkoutSetup',
  stripeCheckout: 'v1/paymentTransaction/checkoutPayment',
};

export const newOnboardingMethods = {
  clientStatus: 'onboarding/clientStatus',
  getOnboardingStatus: 'onboarding/getOnboardingStatus',
  getOnboardingTourStatus: 'onboarding/userStatus',
};

export const physicalCardMethods = {
  plans: (contractorId: number) => `contractors/${contractorId}/plans/benefits`,
  selectPlan: (contractorId: number) => `contractors/${contractorId}/plans`,
  hasActiveCard: (contractorId: number) =>
    `physical-card/contractors/${contractorId}/cards`,
  saveAddress: 'physical-card/cards',
};

export const host = {
  home: {
    methods: homeMethods,
  },
  ms_gateway: {
    methods: apiMethods,
  },
  ms_login: {
    methods: {
      token: 'token',
    },
  },
  timeSheet: {
    methods: timeMethods,
  },
  payment: {
    methods: paymentMethods,
  },
  invoices: {
    methods: invoicesMethods,
  },
  report: {
    methods: reportMethods,
  },
  verificationCenter: {
    methods: verificationCenterMethods,
  },
  teamsMethods: {
    methods: teamsMethods,
  },
  payout: {
    methods: payoutMethods,
  },
  card: {
    methods: cardMethods,
  },
  wallet: {
    methods: walletMethods,
  },
  abaco: {
    methods: abacoMethods,
  },
  acceptances: {
    methods: acceptancesMethods,
  },
  cashin: {
    methods: cashinMethods,
  },
  onboarding: {
    methods: newOnboardingMethods,
  },
  physicalCard: {
    methods: physicalCardMethods,
  },
};
